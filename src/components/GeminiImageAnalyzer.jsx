import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  ChevronLeft,
  Upload,
  AlertCircle,
  RefreshCw,
  Image,
  FileText,
  Zap,
  Globe, // Added for language toggle
} from "lucide-react";

const GeminiPlantAnalyzer = () => {
  const navigate = useNavigate();
  const [selectedImage, setSelectedImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisError, setAnalysisError] = useState(null);
  const [additionalPrompt, setAdditionalPrompt] = useState("");
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

  // Language state - NEW
  const [language, setLanguage] = useState("english"); // "english" or "hebrew"

  // Analysis result sections
  const [plantIdentification, setPlantIdentification] = useState("");
  const [damageAssessment, setDamageAssessment] = useState("");
  const [wateringNeeds, setWateringNeeds] = useState("");
  const [overallHealth, setOverallHealth] = useState("");
  const [recommendations, setRecommendations] = useState("");

  // API settings for Gemini
  const API_KEY = "AIzaSyB_VBSQxJznSYBmKxR31zic1mDuZZTIqzI";
  const API_URL =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";

  // UI Text translations - NEW
  const uiText = {
    english: {
      title: "Plant Health Analyzer",
      back: "Back",
      uploadPhoto: "Upload Plant Photo for Analysis",
      uploadDescription:
        "Upload a photo of your plant to check for damage and watering needs",
      selectImage: "Select Image",
      supportedFormats: "Supported formats: JPG, PNG, GIF (max 20MB)",
      changeImage: "Change Image",
      showAdvanced: "Show Advanced Options",
      hideAdvanced: "Hide Advanced Options",
      additionalInstructions: "Additional Instructions (optional)",
      placeholderText:
        "E.g., 'This is a tomato plant grown indoors' or 'The plant has yellow spots on leaves'",
      analyzePlant: "Analyze Plant Health",
      analyzing: "Analyzing Image...",
      howItWorks: "How Plant Analysis Works",
      howItWorksDesc:
        "Our AI will analyze your plant photo to detect signs of damage, assess watering needs, evaluate overall health, and provide care recommendations. The analysis works best with clear, well-lit photos showing the entire plant or affected areas.",
      analysisResults: "Plant Health Analysis",
      plantIdentification: "Plant Identification",
      damageAssessment: "Damage Assessment",
      wateringNeeds: "Watering Needs",
      overallHealth: "Overall Health",
      recommendations: "Recommendations",
      disclaimer:
        "This plant health assessment is generated by AI based on the image provided.",
      language: "Language",
      english: "English",
      hebrew: "עברית",
    },
    hebrew: {
      title: "מנתח בריאות צמחים",
      back: "חזור",
      uploadPhoto: "העלה תמונת צמח לניתוח",
      uploadDescription: "העלה תמונה של הצמח שלך כדי לבדוק נזקים וצרכי השקיה",
      selectImage: "בחר תמונה",
      supportedFormats: "פורמטים נתמכים: JPG, PNG, GIF (מקסימום 20MB)",
      changeImage: "שנה תמונה",
      showAdvanced: "הצג אפשרויות מתקדמות",
      hideAdvanced: "הסתר אפשרויות מתקדמות",
      additionalInstructions: "הוראות נוספות (אופציונלי)",
      placeholderText:
        "לדוגמה: 'זה צמח עגבנייה הגדל בבית' או 'לצמח יש כתמים צהובים על העלים'",
      analyzePlant: "נתח בריאות צמח",
      analyzing: "מנתח תמונה...",
      howItWorks: "איך עובד ניתוח הצמחים",
      howItWorksDesc:
        "הבינה המלאכותית שלנו תנתח את תמונת הצמח שלך כדי לזהות סימני נזק, להעריך צרכי השקיה, להעריך בריאות כללית ולספק המלצות טיפוח. הניתוח עובד הכי טוב עם תמונות ברורות ומוארות היטב המציגות את הצמח כולו או אזורים מושפעים.",
      analysisResults: "ניתוח בריאות צמח",
      plantIdentification: "זיהוי צמח",
      damageAssessment: "הערכת נזק",
      wateringNeeds: "צרכי השקיה",
      overallHealth: "מצב בריאותי כללי",
      recommendations: "המלצות",
      disclaimer:
        "הערכת בריאות הצמח הזו נוצרת על ידי בינה מלאכותית על בסיס התמונה שסופקה.",
      language: "שפה",
      english: "English",
      hebrew: "עברית",
    },
  };

  // Get current UI text based on language
  const t = uiText[language];

  const resetAnalysis = () => {
    setPlantIdentification("");
    setDamageAssessment("");
    setWateringNeeds("");
    setOverallHealth("");
    setRecommendations("");
    setAnalysisError(null);
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedImage(file);

      // Create preview URL
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);

      // Reset analysis when new image is selected
      resetAnalysis();
    }
  };

  const handleBackClick = () => {
    navigate(-1);
  };

  // Language toggle handler - NEW
  const handleLanguageToggle = () => {
    setLanguage(language === "english" ? "hebrew" : "english");
    // Clear current analysis to encourage re-generation in new language
    resetAnalysis();
  };

  // Parse the structured response from Gemini - MODIFIED for both languages
  const parseStructuredResponse = (text) => {
    try {
      // Extract each section using regex
      const plantTypeMatch = text.match(
        /\[PLANT_TYPE\]([\s\S]*?)\[\/PLANT_TYPE\]/i
      );
      const damageMatch = text.match(/\[DAMAGE\]([\s\S]*?)\[\/DAMAGE\]/i);
      const waterMatch = text.match(/\[WATER\]([\s\S]*?)\[\/WATER\]/i);
      const healthMatch = text.match(/\[HEALTH\]([\s\S]*?)\[\/HEALTH\]/i);
      const recommendationsMatch = text.match(
        /\[RECOMMENDATIONS\]([\s\S]*?)\[\/RECOMMENDATIONS\]/i
      );

      // Default fallback messages based on language
      const fallbacks =
        language === "hebrew"
          ? {
              plant: "לא ניתן לזהות את סוג הצמח",
              damage: "אין מידע על נזק",
              water: "אין מידע על צורכי השקיה",
              health: "אין מידע על מצב בריאותי כללי",
              recommendations: "אין המלצות זמינות",
            }
          : {
              plant: "Unable to identify plant type",
              damage: "No damage information available",
              water: "No watering information available",
              health: "No general health information available",
              recommendations: "No recommendations available",
            };

      // Set the state for each section if found
      setPlantIdentification(
        plantTypeMatch ? plantTypeMatch[1].trim() : fallbacks.plant
      );
      setDamageAssessment(
        damageMatch ? damageMatch[1].trim() : fallbacks.damage
      );
      setWateringNeeds(waterMatch ? waterMatch[1].trim() : fallbacks.water);
      setOverallHealth(healthMatch ? healthMatch[1].trim() : fallbacks.health);
      setRecommendations(
        recommendationsMatch
          ? recommendationsMatch[1].trim()
          : fallbacks.recommendations
      );

      // If we couldn't extract the structured format, handle as a fallback
      if (
        !plantTypeMatch &&
        !damageMatch &&
        !waterMatch &&
        !healthMatch &&
        !recommendationsMatch
      ) {
        // Split the text into roughly equal parts for each section
        const paragraphs = text
          .split(/\n\s*\n/)
          .filter((p) => p.trim().length > 0);
        if (paragraphs.length >= 4) {
          setDamageAssessment(paragraphs[0]);
          setWateringNeeds(paragraphs[1]);
          setOverallHealth(paragraphs[2]);
          setRecommendations(paragraphs[3]);
          if (paragraphs.length >= 5) {
            setPlantIdentification(paragraphs[4]);
          }
        }
      }
    } catch (error) {
      console.error("Error parsing response:", error);
      setAnalysisError("Failed to parse the AI response");
    }
  };

  // Format text with bullet points and formatting - MODIFIED for RTL support
  const formatText = (text) => {
    if (!text) return "";

    // Convert bullet points (- item) to proper HTML
    const withBullets = text.replace(/^- (.+)$/gm, "<li>$1</li>");

    // Add formatting for bold text
    const withBold = withBullets.replace(
      /\*\*(.*?)\*\*/g,
      "<strong>$1</strong>"
    );

    // If there are list items, wrap them in a ul
    const withLists = withBold.replace(
      /<li>(.+)<\/li>/g,
      '<ul class="list-disc list-inside my-2"><li>$1</li></ul>'
    );

    // Return as HTML with proper direction based on language
    return (
      <div
        className={language === "hebrew" ? "text-right" : "text-left"}
        dir={language === "hebrew" ? "rtl" : "ltr"}
        dangerouslySetInnerHTML={{ __html: withLists.replace(/\n/g, "<br/>") }}
      />
    );
  };

  const handleAnalyzeImage = async () => {
    if (!selectedImage) return;

    setIsAnalyzing(true);
    setAnalysisError(null);

    try {
      // Convert image to base64
      const base64Image = await convertFileToBase64(selectedImage);

      // Create language-specific prompts - MODIFIED
      let prompt;

      if (language === "hebrew") {
        prompt = `נתח את תמונת הצמח הזו בפירוט וענה רק בעברית. ראשית, נסה לזהות איזה סוג צמח זה.
        
התמקד ספציפית בשאלות האלה:
1. איזה סוג צמח זה? אם אתה יכול לזהות אותו, ספק את השם בעברית ובאנגלית.
2. האם הצמח פגוע? אם כן, איזה סוג נזק אתה רואה (מזיקים, מחלה, נזק פיזי וכו')?
3. האם הצמח זקוק למים על בסיס מה שאתה יכול לראות בתמונה?
4. מה המצב הבריאותי הכללי של הצמח?
5. אילו פעולות צריך בעל הצמח לנקוט כדי לשפר את בריאות הצמח?

ארגן את הניתוח שלך בעברית עם בדיוק חמישה חלקים אלה, באמצעות בדיוק הסמנים האלה כדי שאוכל לנתח את התגובה:

[PLANT_TYPE]
זיהוי הצמח שלך כאן בעברית
[/PLANT_TYPE]

[DAMAGE]
הערכת הנזק שלך כאן בעברית
[/DAMAGE]

[WATER]
הערכת צרכי ההשקיה שלך כאן בעברית
[/WATER]

[HEALTH]
הערכת הבריאות הכללית שלך כאן בעברית
[/HEALTH]

[RECOMMENDATIONS]
הפעולות המומלצות שלך כאן בעברית
[/RECOMMENDATIONS]`;
      } else {
        prompt = `Analyze this plant image in detail and respond only in English. First, try to identify what type of plant this is.
      
Focus specifically on these questions:
1. What type of plant is this? If you can identify it, provide the name in English and any other common names.
2. Is the plant damaged? If so, what type of damage do you see (pests, disease, physical damage, etc.)?
3. Does the plant need water based on what you can see in the image?
4. What is the overall health status of the plant?
5. What actions should the plant owner take to improve the plant's health?

Organize your analysis in English with EXACTLY these five sections, using exactly these markers so I can parse the response:

[PLANT_TYPE]
Your plant identification here in English
[/PLANT_TYPE]

[DAMAGE]
Your damage assessment here in English
[/DAMAGE]

[WATER]
Your watering needs assessment here in English
[/WATER]

[HEALTH]
Your overall health assessment here in English
[/HEALTH]

[RECOMMENDATIONS]
Your recommended actions here in English
[/RECOMMENDATIONS]`;
      }

      if (additionalPrompt.trim()) {
        prompt += `\n\nAdditional context from the user: ${additionalPrompt.trim()}`;
      }

      // Create payload for Gemini API
      const payload = {
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
              {
                inline_data: {
                  mime_type: selectedImage.type,
                  data: base64Image.split(",")[1], // Remove the data URL prefix
                },
              },
            ],
          },
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 32,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      };

      // Make API request
      const response = await fetch(`${API_URL}?key=${API_KEY}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error?.message || `API error: ${response.status}`
        );
      }

      const data = await response.json();

      if (data.candidates && data.candidates[0]?.content) {
        const responseText = data.candidates[0].content.parts[0].text;
        parseStructuredResponse(responseText);
      } else if (data.promptFeedback && data.promptFeedback.blockReason) {
        setAnalysisError(
          `Response blocked: ${data.promptFeedback.blockReason}`
        );
      } else {
        setAnalysisError("Received an empty or invalid response from the API");
      }
    } catch (err) {
      console.error("Error analyzing image:", err);
      setAnalysisError(err.message);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const convertFileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
      reader.readAsDataURL(file);
    });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with Back Button and Language Toggle */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <button
              onClick={handleBackClick}
              className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ChevronLeft className="h-5 w-5" />
              <span>{t.back}</span>
            </button>
            <h1 className="text-2xl font-bold text-gray-900">{t.title}</h1>
            {/* Language Toggle Button - NEW */}
            <button
              onClick={handleLanguageToggle}
              className="flex items-center space-x-2 bg-blue-50 text-blue-700 px-4 py-2 rounded-md hover:bg-blue-100 transition-colors"
            >
              <Globe className="h-4 w-4" />
              <span>{language === "english" ? t.hebrew : t.english}</span>
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Image Upload Section */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Image className="h-5 w-5 text-blue-500 mr-2" />
            {t.uploadPhoto}
          </h2>

          {!imagePreview ? (
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 flex flex-col items-center justify-center">
              <Image className="h-16 w-16 text-gray-400 mb-4" />
              <p className="text-gray-600 mb-4 text-center">
                {t.uploadDescription}
              </p>
              <label className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors cursor-pointer">
                <Upload className="h-4 w-4" />
                <span>{t.selectImage}</span>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageChange}
                  className="hidden"
                />
              </label>
              <p className="text-xs text-gray-500 mt-2">{t.supportedFormats}</p>
            </div>
          ) : (
            <div className="flex flex-col md:flex-row gap-6">
              <div className="w-full md:w-1/2">
                <div className="rounded-lg overflow-hidden shadow-sm border border-gray-200">
                  <img
                    src={imagePreview}
                    alt="Selected"
                    className="w-full h-auto object-contain max-h-96"
                  />
                </div>
                <div className="mt-4 flex gap-3">
                  <label className="flex items-center space-x-2 bg-blue-600 text-white px-3 py-1.5 text-sm rounded-md hover:bg-blue-700 transition-colors cursor-pointer">
                    <RefreshCw className="h-3.5 w-3.5" />
                    <span>{t.changeImage}</span>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleImageChange}
                      className="hidden"
                    />
                  </label>
                  <p className="text-sm text-gray-500 flex items-center">
                    {selectedImage.name.length > 20
                      ? `${selectedImage.name.substring(0, 20)}...`
                      : selectedImage.name}
                    ({Math.round(selectedImage.size / 1024)} KB)
                  </p>
                </div>
              </div>

              <div className="w-full md:w-1/2">
                <div className="mb-4">
                  <button
                    className="text-sm text-blue-600 hover:text-blue-800 transition-colors flex items-center"
                    onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                  >
                    {showAdvancedOptions ? t.hideAdvanced : t.showAdvanced}
                  </button>
                </div>

                {showAdvancedOptions && (
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {t.additionalInstructions}
                    </label>
                    <textarea
                      value={additionalPrompt}
                      onChange={(e) => setAdditionalPrompt(e.target.value)}
                      placeholder={t.placeholderText}
                      rows={3}
                      className="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                )}

                <button
                  onClick={handleAnalyzeImage}
                  disabled={isAnalyzing || !selectedImage}
                  className={`w-full flex items-center justify-center space-x-2 py-3 px-4 rounded-md text-white transition-colors
                    ${
                      isAnalyzing || !selectedImage
                        ? "bg-gray-400 cursor-not-allowed"
                        : "bg-blue-600 hover:bg-blue-700"
                    }`}
                >
                  {isAnalyzing ? (
                    <>
                      <RefreshCw className="h-5 w-5 animate-spin" />
                      <span>{t.analyzing}</span>
                    </>
                  ) : (
                    <>
                      <Zap className="h-5 w-5" />
                      <span>{t.analyzePlant}</span>
                    </>
                  )}
                </button>

                {analysisError && (
                  <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-start text-red-700">
                      <AlertCircle className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
                      <p className="text-sm">{analysisError}</p>
                    </div>
                  </div>
                )}

                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start text-blue-700">
                    <FileText className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-medium mb-1">{t.howItWorks}</p>
                      <p>{t.howItWorksDesc}</p>
                    </div>
                  </div>
                </div>

                {/* Language Notice */}
                <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center justify-center space-x-2">
                    <Globe className="h-4 w-4 text-green-600" />
                    <span className="text-green-800 text-sm">
                      {language === "hebrew"
                        ? "כעת מוגדר לקבלת ניתוח בעברית - לחץ על כפתור השפה למעלה לשינוי לאנגלית"
                        : "Currently set to receive analysis in English - click the language button above to switch to Hebrew"}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Analysis Results Section */}
        {(plantIdentification ||
          damageAssessment ||
          wateringNeeds ||
          overallHealth ||
          recommendations) && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <FileText className="h-5 w-5 text-green-600 mr-2" />
              {t.analysisResults}
            </h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Plant Identification Box */}
              <div className="bg-purple-50 rounded-lg overflow-hidden border border-purple-100">
                <div className="bg-purple-600 text-white py-2 px-4">
                  <h3
                    className={`font-semibold ${
                      language === "hebrew" ? "text-right" : "text-left"
                    }`}
                  >
                    {t.plantIdentification}
                  </h3>
                </div>
                <div className="p-4">{formatText(plantIdentification)}</div>
              </div>

              {/* Damage Assessment Box */}
              <div className="bg-red-50 rounded-lg overflow-hidden border border-red-100">
                <div className="bg-red-600 text-white py-2 px-4">
                  <h3
                    className={`font-semibold ${
                      language === "hebrew" ? "text-right" : "text-left"
                    }`}
                  >
                    {t.damageAssessment}
                  </h3>
                </div>
                <div className="p-4">{formatText(damageAssessment)}</div>
              </div>

              {/* Watering Needs Box */}
              <div className="bg-blue-50 rounded-lg overflow-hidden border border-blue-100">
                <div className="bg-blue-600 text-white py-2 px-4">
                  <h3
                    className={`font-semibold ${
                      language === "hebrew" ? "text-right" : "text-left"
                    }`}
                  >
                    {t.wateringNeeds}
                  </h3>
                </div>
                <div className="p-4">{formatText(wateringNeeds)}</div>
              </div>

              {/* Overall Health Box */}
              <div className="bg-green-50 rounded-lg overflow-hidden border border-green-100">
                <div className="bg-green-600 text-white py-2 px-4">
                  <h3
                    className={`font-semibold ${
                      language === "hebrew" ? "text-right" : "text-left"
                    }`}
                  >
                    {t.overallHealth}
                  </h3>
                </div>
                <div className="p-4">{formatText(overallHealth)}</div>
              </div>

              {/* Recommendations Box - Full Width */}
              <div className="md:col-span-2 bg-amber-50 rounded-lg overflow-hidden border border-amber-100">
                <div className="bg-amber-600 text-white py-2 px-4">
                  <h3
                    className={`font-semibold ${
                      language === "hebrew" ? "text-right" : "text-left"
                    }`}
                  >
                    {t.recommendations}
                  </h3>
                </div>
                <div className="p-4">{formatText(recommendations)}</div>
              </div>
            </div>

            <div className="mt-4 text-sm text-gray-600 flex items-center">
              <AlertCircle className="h-4 w-4 mr-2 text-gray-500" />
              <span>{t.disclaimer}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default GeminiPlantAnalyzer;
